// Source code generated by AppGPT (www.appgpt.tech)

 //Class to create tables and seed new database
import { DataSource } from "typeorm";
import { DBConfiguration } from "./Configuration";
import { SettingsEntity } from "./db/Settings.entity";
//autogenerate imports based on resources
import { booksEntity } from "./db/books.entity";
import { authorsEntity } from "./db/authors.entity";
import { membersEntity } from "./db/members.entity";
import { loansEntity } from "./db/loans.entity";

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, booksEntity, authorsEntity, membersEntity, loansEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables


    await Database.Seed();
  }
  static async Seed() {
    let data: any = {"books":[{"title":"title 1","author":1,"ISBN":"ISBN 1","publicationDate":"2024-09-28T22:28:35.623Z","genre":"genre 1","status":"status 1","id":69},{"title":"title 2","author":2,"ISBN":"ISBN 2","publicationDate":"2024-05-07T03:30:31.513Z","genre":"genre 2","status":"status 2","id":92},{"title":"title 3","author":3,"ISBN":"ISBN 3","publicationDate":"2025-01-08T13:29:05.269Z","genre":"genre 3","status":"status 3","id":13},{"title":"title 4","author":4,"ISBN":"ISBN 4","publicationDate":"2025-01-19T01:33:59.458Z","genre":"genre 4","status":"status 4","id":99},{"title":"title 5","author":5,"ISBN":"ISBN 5","publicationDate":"2023-05-18T07:21:34.514Z","genre":"genre 5","status":"status 5","id":20}],"authors":[{"name":"name 1","dateOfBirth":"2023-09-18T23:20:23.654Z","nationality":"nationality 1","listOfBooks":1,"id":35},{"name":"name 2","dateOfBirth":"2023-08-18T23:19:34.138Z","nationality":"nationality 2","listOfBooks":2,"id":7},{"name":"name 3","dateOfBirth":"2023-09-15T04:52:05.487Z","nationality":"nationality 3","listOfBooks":3,"id":46},{"name":"name 4","dateOfBirth":"2024-08-27T21:41:36.336Z","nationality":"nationality 4","listOfBooks":4,"id":96},{"name":"name 5","dateOfBirth":"2024-09-17T15:21:20.652Z","nationality":"nationality 5","listOfBooks":5,"id":16}],"members":[{"memberID":"memberID 1","name":"name 1","emailAddress":"emailAddress 1","phoneNumber":"phoneNumber 1","address":"address 1","membershipStartDate":"2024-01-22T01:44:38.176Z","id":52},{"memberID":"memberID 2","name":"name 2","emailAddress":"emailAddress 2","phoneNumber":"phoneNumber 2","address":"address 2","membershipStartDate":"2024-01-16T08:35:03.641Z","id":51},{"memberID":"memberID 3","name":"name 3","emailAddress":"emailAddress 3","phoneNumber":"phoneNumber 3","address":"address 3","membershipStartDate":"2023-10-26T17:51:40.999Z","id":32},{"memberID":"memberID 4","name":"name 4","emailAddress":"emailAddress 4","phoneNumber":"phoneNumber 4","address":"address 4","membershipStartDate":"2024-05-14T17:48:28.352Z","id":29},{"memberID":"memberID 5","name":"name 5","emailAddress":"emailAddress 5","phoneNumber":"phoneNumber 5","address":"address 5","membershipStartDate":"2023-12-23T11:29:31.063Z","id":74}],"loans":[{"loanID":"loanID 1","bookID":1,"memberID":1,"loanDate":"2024-03-17T14:59:20.965Z","dueDate":"2024-10-24T03:33:22.795Z","returnDate":"2024-04-22T04:47:40.912Z","id":89},{"loanID":"loanID 2","bookID":2,"memberID":2,"loanDate":"2023-07-23T19:31:04.574Z","dueDate":"2023-06-19T23:06:48.746Z","returnDate":"2023-08-29T16:11:54.737Z","id":52},{"loanID":"loanID 3","bookID":3,"memberID":3,"loanDate":"2024-02-14T07:28:40.317Z","dueDate":"2025-03-01T10:55:05.807Z","returnDate":"2023-09-11T12:54:33.573Z","id":5},{"loanID":"loanID 4","bookID":4,"memberID":4,"loanDate":"2024-02-21T22:29:08.646Z","dueDate":"2024-11-27T14:36:17.142Z","returnDate":"2024-03-03T05:22:59.386Z","id":4},{"loanID":"loanID 5","bookID":5,"memberID":5,"loanDate":"2024-02-29T11:04:11.062Z","dueDate":"2023-11-22T21:47:25.774Z","returnDate":"2023-06-02T10:09:43.371Z","id":51}]};
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true){
      console.log('   Seeding database...');
      await this.SeedResource("booksEntity", data.books);
await this.SeedResource("authorsEntity", data.authors);
await this.SeedResource("membersEntity", data.members);
await this.SeedResource("loansEntity", data.loans); 
      await this.SeedResource("SettingsEntity", {
        settingname: "isSeeded",
        settingvalue: "true",
      });
    }else{
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository("SettingsEntity");
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: "isSeeded",
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table '+resourceName);
    await repo.upsert(resourceData, ["id"]);
  }
}

